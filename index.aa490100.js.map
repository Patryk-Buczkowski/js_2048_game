{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nwindow.addEventListener(\"load\", function() {\n    var startToReset = function startToReset() {\n        if (buttonStart.classList.contains(\"start\")) {\n            htmlBoard.start = true;\n            htmlBoard.appendOneBox();\n            htmlBoard.appendOneBox();\n        }\n        buttonStart.classList.add(\"restart\");\n        buttonStart.classList.remove(\"start\");\n        messageStart.classList.add(\"hidden\");\n        if (buttonStart.textContent === \"Restart\") {\n            htmlBoard.board = [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ];\n            messageWin.classList.add(\"hidden\");\n            messageLose.classList.add(\"hidden\");\n            htmlBoard.appendOneBox();\n            htmlBoard.appendOneBox();\n            htmlBoard.score = 0;\n            scoreElem.textContent = \"0\";\n        }\n        buttonStart.textContent = \"Restart\";\n    };\n    var buttonStart = document.querySelector(\".button.start\");\n    var table = document.querySelector(\"table tbody\");\n    var scoreElem = document.querySelector(\".game-score\");\n    var messageStart = document.querySelector(\".message-start\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var boardSize = 4;\n    var Board = /*#__PURE__*/ function() {\n        function Board() {\n            _class_call_check(this, Board);\n            this.board = [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ];\n            this.score = 0;\n            this.start = false;\n        }\n        _create_class(Board, [\n            {\n                key: \"appendOneBox\",\n                value: function appendOneBox() {\n                    if (!this.start) return;\n                    if (this.occupiedPlaces().length < 16) {\n                        var ShouldAdd4 = Math.random() < 0.1;\n                        var xRandomIndex = Math.floor(Math.random() * this.board.length);\n                        var yRandomIndex = Math.floor(Math.random() * this.board[0].length);\n                        var occupiedPlaces = this.occupiedPlaces();\n                        while(occupiedPlaces.some(function(cell) {\n                            return cell.y === xRandomIndex && cell.x === yRandomIndex;\n                        })){\n                            xRandomIndex = Math.floor(Math.random() * boardSize);\n                            yRandomIndex = Math.floor(Math.random() * boardSize);\n                        }\n                        this.board[xRandomIndex][yRandomIndex] = ShouldAdd4 ? 4 : 2;\n                        this.render();\n                    }\n                    if (this.occupiedPlaces().length === 16 && !this.availableMoves()) messageLose.classList.remove(\"hidden\");\n                }\n            },\n            {\n                key: \"availableMoves\",\n                value: function availableMoves() {\n                    var _this = this;\n                    var move = this.occupiedPlaces().some(function(param) {\n                        var y = param.y, x = param.x;\n                        return _this.getBoardField(y, x - 1) === _this.getBoardField(y, x) || _this.getBoardField(y, x + 1) === _this.getBoardField(y, x) || _this.getBoardField(y + 1, x) === _this.getBoardField(y, x) || _this.getBoardField(y - 1, x) === _this.getBoardField(y, x);\n                    });\n                    return move;\n                }\n            },\n            {\n                key: \"getBoardField\",\n                value: function getBoardField(y, x) {\n                    return this.board[y] && this.board[y][x] || null;\n                }\n            },\n            {\n                key: \"check2048\",\n                value: function check2048() {\n                    if (this.board.flat().some(function(elem) {\n                        return elem === 2048;\n                    })) messageWin.classList.toggle(\"hidden\");\n                }\n            },\n            {\n                key: \"updateScore\",\n                value: function updateScore(addedScore) {\n                    this.score += addedScore;\n                    scoreElem.textContent = this.score.toString();\n                }\n            },\n            {\n                key: \"occupiedPlaces\",\n                value: function occupiedPlaces() {\n                    var occupiedPlaces = [];\n                    for(var y = 0; y < boardSize; y++){\n                        for(var x = 0; x < this.board[y].length; x++)if (this.board[y][x] !== 0) occupiedPlaces.push({\n                            \"y\": y,\n                            \"x\": x\n                        });\n                    }\n                    return occupiedPlaces;\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    for(var y = 0; y < boardSize; y++)for(var x = 0; x < this.board[y].length; x++){\n                        var cell = this.board[y][x];\n                        table.children[y].children[x].textContent = \"\";\n                        table.children[y].children[x].className = \"field-cell\";\n                        if (cell !== 0) {\n                            table.children[y].children[x].textContent = \"\".concat(cell);\n                            table.children[y].children[x].classList.add(\"field-cell--\".concat(cell));\n                        }\n                    }\n                }\n            },\n            {\n                key: \"moveRight\",\n                value: function moveRight() {\n                    var col = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : boardSize - 1, row = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, hasMerged = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n                    var merged = hasMerged;\n                    if (row < boardSize) {\n                        if (col > 0) {\n                            var temp = this.board[row][col];\n                            var nextValue = this.board[row][col - 1];\n                            var isTheSameNumber = nextValue === temp && !merged;\n                            if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n                                this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n                                this.board[row][col - 1] = 0;\n                                if (isTheSameNumber) {\n                                    this.updateScore(nextValue * 2);\n                                    merged = true;\n                                }\n                                if (col < boardSize - 1) return this.moveRight(col + 1, row, merged);\n                            }\n                            return this.moveRight(col - 1, row);\n                        } else return this.moveRight(boardSize - 1, row + 1);\n                    }\n                    this.appendOneBox();\n                    this.occupiedPlaces();\n                    this.check2048();\n                }\n            },\n            {\n                key: \"moveLeft\",\n                value: function moveLeft() {\n                    var col = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, row = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, hasMerged = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n                    var merged = hasMerged;\n                    if (row < boardSize) {\n                        if (col < boardSize - 1) {\n                            var temp = this.board[row][col];\n                            var nextValue = this.board[row][col + 1];\n                            var isTheSameNumber = nextValue === temp && !merged;\n                            if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n                                this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n                                this.board[row][col + 1] = 0;\n                                if (isTheSameNumber) {\n                                    this.updateScore(nextValue * 2);\n                                    merged = true;\n                                }\n                                if (col > 0) return this.moveLeft(col - 1, row, merged);\n                            }\n                            return this.moveLeft(col + 1, row);\n                        } else return this.moveLeft(0, row + 1);\n                    }\n                    this.appendOneBox();\n                    this.occupiedPlaces();\n                    this.check2048();\n                }\n            },\n            {\n                key: \"moveUp\",\n                value: function moveUp() {\n                    var col = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, row = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, hasMerged = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n                    var merged = hasMerged;\n                    if (col < boardSize) {\n                        if (row < boardSize - 1) {\n                            var temp = this.board[row][col];\n                            var nextValue = this.board[row + 1][col];\n                            var isTheSameNumber = nextValue === temp && !merged;\n                            if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n                                this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n                                this.board[row + 1][col] = 0;\n                                if (isTheSameNumber) {\n                                    this.updateScore(nextValue * 2);\n                                    merged = true;\n                                }\n                                if (row > 0) return this.moveUp(col, row - 1, merged);\n                            }\n                            return this.moveUp(col, row + 1);\n                        } else return this.moveUp(col + 1, 0);\n                    }\n                    this.appendOneBox();\n                    this.occupiedPlaces();\n                    this.check2048();\n                }\n            },\n            {\n                key: \"moveDown\",\n                value: function moveDown() {\n                    var col = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, row = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : boardSize - 1, hasMerged = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n                    var merged = hasMerged;\n                    if (col < boardSize) {\n                        if (row > 0) {\n                            var temp = this.board[row][col];\n                            var nextValue = this.board[row - 1][col];\n                            var isTheSameNumber = nextValue === temp && !merged;\n                            if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n                                this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n                                this.board[row - 1][col] = 0;\n                                if (isTheSameNumber) {\n                                    this.updateScore(nextValue * 2);\n                                    merged = true;\n                                }\n                                if (row < boardSize - 1) return this.moveDown(col, row + 1, merged);\n                            }\n                            return this.moveDown(col, row - 1);\n                        } else return this.moveDown(col + 1, boardSize - 1);\n                    }\n                    this.appendOneBox();\n                    this.occupiedPlaces();\n                    this.check2048();\n                }\n            }\n        ]);\n        return Board;\n    }();\n    var htmlBoard = new Board();\n    var arrowLeft = \"ArrowLeft\";\n    var arrowRight = \"ArrowRight\";\n    var arrowUp = \"ArrowUp\";\n    var arrowDown = \"ArrowDown\";\n    document.addEventListener(\"keydown\", function(ev) {\n        switch(ev.key){\n            case arrowLeft:\n                htmlBoard.moveLeft();\n                break;\n            case arrowRight:\n                htmlBoard.moveRight();\n                break;\n            case arrowUp:\n                ev.preventDefault();\n                htmlBoard.moveUp();\n                break;\n            case arrowDown:\n                ev.preventDefault();\n                htmlBoard.moveDown();\n                break;\n            default:\n                throw new Error(\"wrong button\");\n        }\n    });\n    buttonStart.addEventListener(\"click\", startToReset);\n});\n\n//# sourceMappingURL=index.aa490100.js.map\n","'use strict';\n\nwindow.addEventListener('load', () => {\n  const buttonStart = document.querySelector('.button.start');\n  const table = document.querySelector('table tbody');\n  const scoreElem = document.querySelector('.game-score');\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n  const boardSize = 4;\n\n  class Board {\n    constructor() {\n      this.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n      this.score = 0;\n      this.start = false;\n    }\n\n    appendOneBox() {\n      if (!this.start) {\n        return;\n      }\n\n      if (this.occupiedPlaces().length < 16) {\n        const ShouldAdd4 = Math.random() < 0.1;\n        let xRandomIndex\n        = Math.floor(Math.random() * (this.board.length));\n        let yRandomIndex\n        = Math.floor(Math.random() * (this.board[0].length));\n\n        const occupiedPlaces = this.occupiedPlaces();\n\n        while (occupiedPlaces.some(\n          cell => cell.y === xRandomIndex && cell.x === yRandomIndex)) {\n          xRandomIndex\n          = Math.floor(Math.random() * (boardSize));\n\n          yRandomIndex\n          = Math.floor(Math.random() * (boardSize));\n        }\n\n        this.board[xRandomIndex][yRandomIndex] = ShouldAdd4 ? 4 : 2;\n\n        this.render();\n      }\n\n      if (this.occupiedPlaces().length === 16 && !this.availableMoves()) {\n        messageLose.classList.remove('hidden');\n      }\n    }\n\n    availableMoves() {\n      const move = this.occupiedPlaces().some(({ y, x }) => {\n        return this.getBoardField(y, x - 1) === this.getBoardField(y, x)\n        || this.getBoardField(y, x + 1) === this.getBoardField(y, x)\n        || this.getBoardField(y + 1, x) === this.getBoardField(y, x)\n        || this.getBoardField(y - 1, x) === this.getBoardField(y, x);\n      });\n\n      return move;\n    }\n\n    getBoardField(y, x) {\n      return (this.board[y] && this.board[y][x]) || null;\n    }\n\n    check2048() {\n      if (this.board.flat().some(elem => elem === 2048)) {\n        messageWin.classList.toggle('hidden');\n      }\n    }\n\n    updateScore(addedScore) {\n      this.score += addedScore;\n      scoreElem.textContent = this.score.toString();\n    }\n\n    occupiedPlaces() {\n      const occupiedPlaces = [];\n\n      for (let y = 0; y < boardSize; y++) {\n        for (let x = 0; x < this.board[y].length; x++) {\n          if (this.board[y][x] !== 0) {\n            occupiedPlaces.push({\n              'y': y,\n              'x': x,\n            });\n          }\n        }\n      }\n\n      return occupiedPlaces;\n    }\n\n    render() {\n      for (let y = 0; y < boardSize; y++) {\n        for (let x = 0; x < this.board[y].length; x++) {\n          const cell = this.board[y][x];\n\n          table.children[y].children[x].textContent = '';\n          table.children[y].children[x].className = 'field-cell';\n\n          if (cell !== 0) {\n            table.children[y].children[x].textContent = `${cell}`;\n            table.children[y].children[x].classList.add(`field-cell--${cell}`);\n          }\n        }\n      }\n    }\n\n    moveRight(col = boardSize - 1, row = 0, hasMerged = false) {\n      let merged = hasMerged;\n\n      if (row < boardSize) {\n        if (col > 0) {\n          const temp = this.board[row][col];\n          const nextValue = this.board[row][col - 1];\n          const isTheSameNumber = nextValue === temp && !merged;\n\n          if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n            this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n            this.board[row][col - 1] = 0;\n\n            if (isTheSameNumber) {\n              this.updateScore(nextValue * 2);\n              merged = true;\n            }\n\n            if (col < boardSize - 1) {\n              return this.moveRight(col + 1, row, merged);\n            }\n          }\n\n          return this.moveRight(col - 1, row);\n        } else {\n          return this.moveRight(boardSize - 1, row + 1);\n        }\n      }\n\n      this.appendOneBox();\n      this.occupiedPlaces();\n      this.check2048();\n    }\n\n    moveLeft(col = 0, row = 0, hasMerged = false) {\n      let merged = hasMerged;\n\n      if (row < boardSize) {\n        if (col < boardSize - 1) {\n          const temp = this.board[row][col];\n          const nextValue = this.board[row][col + 1];\n          const isTheSameNumber = nextValue === temp && !merged;\n\n          if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n            this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n            this.board[row][col + 1] = 0;\n\n            if (isTheSameNumber) {\n              this.updateScore(nextValue * 2);\n              merged = true;\n            }\n\n            if (col > 0) {\n              return this.moveLeft(col - 1, row, merged);\n            }\n          }\n\n          return this.moveLeft(col + 1, row);\n        } else {\n          return this.moveLeft(0, row + 1);\n        }\n      }\n\n      this.appendOneBox();\n      this.occupiedPlaces();\n      this.check2048();\n    }\n\n    moveUp(col = 0, row = 0, hasMerged = false) {\n      let merged = hasMerged;\n\n      if (col < boardSize) {\n        if (row < boardSize - 1) {\n          const temp = this.board[row][col];\n          const nextValue = this.board[row + 1][col];\n          const isTheSameNumber = nextValue === temp && !merged;\n\n          if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n            this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n            this.board[row + 1][col] = 0;\n\n            if (isTheSameNumber) {\n              this.updateScore(nextValue * 2);\n              merged = true;\n            }\n\n            if (row > 0) {\n              return this.moveUp(col, row - 1, merged);\n            }\n          }\n\n          return this.moveUp(col, row + 1);\n        } else {\n          return this.moveUp(col + 1, 0);\n        }\n      }\n\n      this.appendOneBox();\n      this.occupiedPlaces();\n      this.check2048();\n    }\n\n    moveDown(col = 0, row = boardSize - 1, hasMerged = false) {\n      let merged = hasMerged;\n\n      if (col < boardSize) {\n        if (row > 0) {\n          const temp = this.board[row][col];\n          const nextValue = this.board[row - 1][col];\n          const isTheSameNumber = nextValue === temp && !merged;\n\n          if (nextValue !== 0 && (temp === 0 || isTheSameNumber)) {\n            this.board[row][col] = isTheSameNumber ? nextValue * 2 : nextValue;\n            this.board[row - 1][col] = 0;\n\n            if (isTheSameNumber) {\n              this.updateScore(nextValue * 2);\n              merged = true;\n            }\n\n            if (row < boardSize - 1) {\n              return this.moveDown(col, row + 1, merged);\n            }\n          }\n\n          return this.moveDown(col, row - 1);\n        } else {\n          return this.moveDown(col + 1, boardSize - 1);\n        }\n      }\n\n      this.appendOneBox();\n      this.occupiedPlaces();\n      this.check2048();\n    }\n  }\n\n  const htmlBoard = new Board();\n  const arrowLeft = 'ArrowLeft';\n  const arrowRight = 'ArrowRight';\n  const arrowUp = 'ArrowUp';\n  const arrowDown = 'ArrowDown';\n\n  document.addEventListener('keydown', ev => {\n    switch (ev.key) {\n      case arrowLeft:\n        htmlBoard.moveLeft();\n        break;\n      case arrowRight:\n        htmlBoard.moveRight();\n        break;\n      case arrowUp:\n        ev.preventDefault();\n        htmlBoard.moveUp();\n        break;\n      case arrowDown:\n        ev.preventDefault();\n        htmlBoard.moveDown();\n        break;\n      default:\n        throw new Error('wrong button');\n    }\n  });\n  buttonStart.addEventListener('click', startToReset);\n\n  function startToReset() {\n    if (buttonStart.classList.contains('start')) {\n      htmlBoard.start = true;\n      htmlBoard.appendOneBox();\n      htmlBoard.appendOneBox();\n    }\n\n    buttonStart.classList.add('restart');\n    buttonStart.classList.remove('start');\n    messageStart.classList.add('hidden');\n\n    if (buttonStart.textContent === 'Restart') {\n      htmlBoard.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n\n      messageWin.classList.add('hidden');\n      messageLose.classList.add('hidden');\n      htmlBoard.appendOneBox();\n      htmlBoard.appendOneBox();\n      htmlBoard.score = 0;\n      scoreElem.textContent = '0';\n    }\n\n    buttonStart.textContent = 'Restart';\n  }\n});\n"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","window","addEventListener","buttonStart","document","querySelector","table","scoreElem","messageStart","messageWin","messageLose","htmlBoard","protoProps","staticProps","Board","_class_call_check","instance","Constructor","TypeError","board","score","start","value","occupiedPlaces","xRandomIndex","Math","floor","random","yRandomIndex","some","cell","y","x","ShouldAdd4","render","availableMoves","classList","remove","_this","param","getBoardField","flat","elem","toggle","addedScore","textContent","toString","push","children","className","concat","add","col","arguments","boardSize","row","hasMerged","merged","moveRight","temp","nextValue","isTheSameNumber","updateScore","appendOneBox","check2048","moveLeft","moveUp","moveDown","prototype","ev","preventDefault","Error","contains"],"version":3,"file":"index.aa490100.js.map"}